// Generated by gencpp from file ccmslam_msgs/PC.msg
// DO NOT EDIT!


#ifndef CCMSLAM_MSGS_MESSAGE_PC_H
#define CCMSLAM_MSGS_MESSAGE_PC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ccmslam_msgs
{
template <class ContainerAllocator>
struct PC_
{
  typedef PC_<ContainerAllocator> Type;

  PC_()
    : mDepth(0.0)
    , mx(0.0)
    , my(0.0)
    , mblue(0)
    , mgreen(0)
    , mred(0)  {
    }
  PC_(const ContainerAllocator& _alloc)
    : mDepth(0.0)
    , mx(0.0)
    , my(0.0)
    , mblue(0)
    , mgreen(0)
    , mred(0)  {
  (void)_alloc;
    }



   typedef double _mDepth_type;
  _mDepth_type mDepth;

   typedef double _mx_type;
  _mx_type mx;

   typedef double _my_type;
  _my_type my;

   typedef uint8_t _mblue_type;
  _mblue_type mblue;

   typedef uint8_t _mgreen_type;
  _mgreen_type mgreen;

   typedef uint8_t _mred_type;
  _mred_type mred;





  typedef boost::shared_ptr< ::ccmslam_msgs::PC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ccmslam_msgs::PC_<ContainerAllocator> const> ConstPtr;

}; // struct PC_

typedef ::ccmslam_msgs::PC_<std::allocator<void> > PC;

typedef boost::shared_ptr< ::ccmslam_msgs::PC > PCPtr;
typedef boost::shared_ptr< ::ccmslam_msgs::PC const> PCConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ccmslam_msgs::PC_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ccmslam_msgs::PC_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ccmslam_msgs::PC_<ContainerAllocator1> & lhs, const ::ccmslam_msgs::PC_<ContainerAllocator2> & rhs)
{
  return lhs.mDepth == rhs.mDepth &&
    lhs.mx == rhs.mx &&
    lhs.my == rhs.my &&
    lhs.mblue == rhs.mblue &&
    lhs.mgreen == rhs.mgreen &&
    lhs.mred == rhs.mred;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ccmslam_msgs::PC_<ContainerAllocator1> & lhs, const ::ccmslam_msgs::PC_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ccmslam_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ccmslam_msgs::PC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ccmslam_msgs::PC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccmslam_msgs::PC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ccmslam_msgs::PC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccmslam_msgs::PC_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ccmslam_msgs::PC_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ccmslam_msgs::PC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bcd02d77df99fd4888c5c5f0c39553bc";
  }

  static const char* value(const ::ccmslam_msgs::PC_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbcd02d77df99fd48ULL;
  static const uint64_t static_value2 = 0x88c5c5f0c39553bcULL;
};

template<class ContainerAllocator>
struct DataType< ::ccmslam_msgs::PC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccmslam_msgs/PC";
  }

  static const char* value(const ::ccmslam_msgs::PC_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ccmslam_msgs::PC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 mDepth\n"
"float64 mx\n"
"float64 my\n"
"uint8 mblue\n"
"uint8 mgreen\n"
"uint8 mred\n"
;
  }

  static const char* value(const ::ccmslam_msgs::PC_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ccmslam_msgs::PC_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mDepth);
      stream.next(m.mx);
      stream.next(m.my);
      stream.next(m.mblue);
      stream.next(m.mgreen);
      stream.next(m.mred);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PC_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ccmslam_msgs::PC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ccmslam_msgs::PC_<ContainerAllocator>& v)
  {
    s << indent << "mDepth: ";
    Printer<double>::stream(s, indent + "  ", v.mDepth);
    s << indent << "mx: ";
    Printer<double>::stream(s, indent + "  ", v.mx);
    s << indent << "my: ";
    Printer<double>::stream(s, indent + "  ", v.my);
    s << indent << "mblue: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mblue);
    s << indent << "mgreen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mgreen);
    s << indent << "mred: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mred);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CCMSLAM_MSGS_MESSAGE_PC_H
